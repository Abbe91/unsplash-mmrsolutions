{"ast":null,"code":"var _s = $RefreshSig$();\n\n// @ts-nocheck\nimport React, { useState } from 'react';\nimport useStyles from './styles';\nimport \"@fontsource/roboto\"; // Loading Roboto font. Material-UI was designed with this font in mind.\n\n// Define theme settings\nconst light = {\n  palette: {\n    type: \"light\"\n  }\n};\nconst dark = {\n  palette: {\n    type: \"dark\"\n  }\n};\n\nconst NavBar = ({\n  input,\n  setInput\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\n  const [auth, setAuth] = React.useState(true);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null); // start\n  // check for saved 'darkMode' in localStorage\n\n  let darkMode = localStorage.getItem('darkMode');\n\n  const enableDarkMode = () => {\n    localStorage.setItem('darkMode', 'enabled');\n  };\n\n  const disableDarkMode = () => {\n    // 2. Update darkMode in localStorage \n    localStorage.setItem('darkMode', null);\n  }; // If the user already visited and enabled darkMode\n  // start things off with it on\n\n\n  const whiteTheme = () => {\n    setIsDarkTheme(!isDarkTheme);\n  };\n\n  const blackTheme = () => {\n    setIsDarkTheme(isDarkTheme);\n  };\n\n  if (darkMode === 'enabled') {\n    whiteTheme;\n  } else {\n    blackTheme;\n  }\n\n  const changeTheme = () => {\n    setIsDarkTheme(!isDarkTheme);\n    darkMode = localStorage.getItem('darkMode');\n\n    if (darkMode !== 'enabled') {\n      enableDarkMode();\n    } else {\n      disableDarkMode();\n    }\n  };\n};\n\n_s(NavBar, \"a/pyBDJhdt0AIq9QIdCzRVfZXzo=\", false, function () {\n  return [useStyles];\n});\n\n_c = NavBar;\nexport default NavBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavBar\");","map":{"version":3,"sources":["/Users/abdullahabualhaijja/mmrsoultions/unsplash-mmrsolutions/src/components/navBar/navbar.tsx"],"names":["React","useState","useStyles","light","palette","type","dark","NavBar","input","setInput","classes","isDarkTheme","setIsDarkTheme","auth","setAuth","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","darkMode","localStorage","getItem","enableDarkMode","setItem","disableDarkMode","whiteTheme","blackTheme","changeTheme"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAaA,OAAOC,SAAP,MAAsB,UAAtB;AACA,OAAO,oBAAP,C,CAA6B;;AAY7B;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC;AADG,CAAd;AAMA,MAAMC,IAAI,GAAG;AACXF,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC;AADE,CAAb;;AAMA,MAAME,MAAM,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AAAA;;AACpC,QAAMC,OAAO,GAAGR,SAAS,EAAzB;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBd,KAAK,CAACC,QAAN,CAAe,IAAf,CAAxB;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0BhB,KAAK,CAACC,QAAN,CAAmC,IAAnC,CAAhC;AACA,QAAM,CAACgB,kBAAD,EAAqBC,qBAArB,IAA8ClB,KAAK,CAACC,QAAN,CAAmC,IAAnC,CAApD,CALoC,CAMtC;AACA;;AACA,MAAIkB,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAf;;AAEA,QAAMC,cAAc,GAAG,MAAM;AAC3BF,IAAAA,YAAY,CAACG,OAAb,CAAqB,UAArB,EAAiC,SAAjC;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAG,MAAM;AAE5B;AACAJ,IAAAA,YAAY,CAACG,OAAb,CAAqB,UAArB,EAAiC,IAAjC;AACD,GAJD,CAdsC,CAoBtC;AACA;;;AAEA,QAAME,UAAU,GAAG,MAAK;AAEtBb,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAHD;;AAIA,QAAMe,UAAU,GAAG,MAAK;AACtBd,IAAAA,cAAc,CAACD,WAAD,CAAd;AACD,GAFD;;AAGA,MAAIQ,QAAQ,KAAK,SAAjB,EAA4B;AAC1BM,IAAAA,UAAU;AACX,GAFD,MAEM;AACHC,IAAAA,UAAU;AACZ;;AACD,QAAMC,WAAW,GAAG,MAAM;AACxBf,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACAQ,IAAAA,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX;;AACA,QAAIF,QAAQ,KAAK,SAAjB,EAA4B;AAC1BG,MAAAA,cAAc;AACf,KAFD,MAEO;AACLE,MAAAA,eAAe;AAChB;AACF,GARD;AAYC,CA/CD;;GAAMjB,M;UACYL,S;;;KADZK,M;AAgDN,eAAeA,MAAf","sourcesContent":["// @ts-nocheck\nimport React, {useState} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Switch from '@material-ui/core/Switch';\nimport useStyles from './styles';\nimport \"@fontsource/roboto\"; // Loading Roboto font. Material-UI was designed with this font in mind.\nimport {\n  ThemeProvider,\n  Card,\n  CardHeader,\n  CardContent,\n  Box,\n  Container,\n  CssBaseline,\n} from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\n// Define theme settings\nconst light = {\n  palette: {\n    type: \"light\",\n  },\n};\n\nconst dark = {\n  palette: {\n    type: \"dark\",\n  },\n};\n\nconst NavBar = ({input, setInput}) => {\n  const classes = useStyles()\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\n  const [auth, setAuth] = React.useState(true);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null);\n// start\n// check for saved 'darkMode' in localStorage\nlet darkMode = localStorage.getItem('darkMode'); \n\nconst enableDarkMode = () => {\n  localStorage.setItem('darkMode', 'enabled');\n}\n\nconst disableDarkMode = () => {\n\n  // 2. Update darkMode in localStorage \n  localStorage.setItem('darkMode', null);\n}\n \n// If the user already visited and enabled darkMode\n// start things off with it on\n\nconst whiteTheme = () =>{\n\n  setIsDarkTheme(!isDarkTheme);\n}\nconst blackTheme = () =>{\n  setIsDarkTheme(isDarkTheme);\n}\nif (darkMode === 'enabled') {\n  whiteTheme\n}else {\n   blackTheme\n}\nconst changeTheme = () => {\n  setIsDarkTheme(!isDarkTheme);\n  darkMode = localStorage.getItem('darkMode'); \n  if (darkMode !== 'enabled') {\n    enableDarkMode();\n  } else {  \n    disableDarkMode(); \n  }\n};\n\n\n\n}\nexport default NavBar;"]},"metadata":{},"sourceType":"module"}